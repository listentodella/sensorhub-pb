syntax = "proto3";
package sns_bus;
import "sns_std_type.proto";

// The operation to be performed by the async com port
enum sns_bus_operation_type
{
  SNS_BUS_OPERATION_TYPE_READ = 0;
  SNS_BUS_OPERATION_TYPE_WRITE = 1;
}

// The bus type to be accessed by the async com port
enum sns_bus_bus_type
{
  // I2C bus:
  SNS_BUS_BUS_TYPE_I2C            = 0;

  // SPI bus:
  SNS_BUS_BUS_TYPE_SPI            = 1;

  // I3C bus, standard data rate:
  SNS_BUS_BUS_TYPE_I3C_SDR        = 3;

  // I3C bus, double data rate:
  SNS_BUS_BUS_TYPE_I3C_HDR_DDR    = 4;

  // I3C bus, legacy I2C device attached to I3C bus:
    SNS_BUS_BUS_TYPE_I3C_I2C_LEGACY = 5;
}

// The registry address type to be used by async com port
enum sns_bus_reg_addr_type
{
  SNS_BUS_REG_ADDR_TYPE_8_BIT = 0;
  SNS_BUS_REG_ADDR_TYPE_16_BIT = 1;
  SNS_BUS_REG_ADDR_TYPE_32_BIT = 2;
}

// Configuration message
message sns_bus_config
{
  // The bus type
  optional sns_bus_bus_type bus_type = 1;

  // Slave Address for I2C.
  // Dynamic slave address for I3C.
  // Chip Select for SPI.
  optional fixed32 slave_control = 2;

  // Register address type for the slave
  optional sns_bus_reg_addr_type reg_addr_type = 3;

  // Minimum bus clock supported by slave in kHz
  optional fixed32 min_bus_speed_kHz = 4;

  // Maximum bus clock supported by slave in kHz
  optional fixed32 max_bus_speed_kHz = 5;

  // Platform bus instance number (BLSP number)
  optional fixed32 bus_instance = 6;
}

// A single read or write operation.
message sns_bus_vector
{
  // Read or write operation
  optional sns_bus_operation_type operation = 1;

  // Register address
  optional fixed32 reg_addr = 2;


  // Number of bytes to read or write.
  // The async com port will ignore this field for a write
  // operation and use the size of the buffer present in the message.
  //
  // For events generated by the async com port, this field will always match the
  // size of the buffer when it is present.
  optional fixed32 num_bytes = 3;

  // Buffer
  // The async com port will ignore this field in a request for a read operation.
  optional bytes buffer = 4;
}


// A collection of read and write operations
message sns_bus_vector_rw
{
  // Number of operations
  optional fixed32 num_vectors = 1;

  // Read/write operations
  repeated sns_bus_vector vectors = 2;
}

// Notifies the client of an error during a transaction
message sns_bus_error
{
  // Registry address
  optional fixed32 reg_addr = 1;

  // Number of bytes that was to be read/written
  optional fixed32 num_bytes = 2;

  // Error code
  optional sns_std_type.sns_std_error error_code = 3;
}


// Message IDs
enum sns_bus_msgid {
  SNS_BUS_MSGID_RESERVED = 0;
  SNS_BUS_MSGID_SNS_BUS_CONFIG = 512;
  SNS_BUS_MSGID_SNS_BUS_VECTOR_RW = 1024;
  SNS_BUS_MSGID_SNS_BUS_ERROR = 1025;
  SNS_BUS_MSGID_SNS_BUS_REG = 1026;
}
